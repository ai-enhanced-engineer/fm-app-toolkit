[project]
name = "fm-app-toolkit"
version = "1.2.0"
description = "Foundation Model Application Toolkit - Production patterns for FM-based applications"
authors = [{name="Leopoldo Garcia Vargas", email="lk13.dev@gmail.com"}]
requires-python = ">=3.12"
license = {text = "Apache-2.0"}
dependencies = [
    # Core Data & Validation
    "pandas>=2.1.0",
    "pydantic>=2.11.5",
    "pydantic-settings>=2.9.1",
    # Configuration & Environment
    "python-dotenv>=1.0.0",
    # Logging & Observability
    "structlog>=25.4.0",
    "logfire>=4.3.6",
    "langfuse<3.0.0",
    "openinference-instrumentation-llama-index>=4.3.4",
    # LlamaIndex Ecosystem
    "llama-index-core>=0.11.0",
    "llama-cloud>=0.1.0",
    "llama-index-readers-gcs>=0.5.0",
    "llama-index-callbacks-langfuse>=0.4.0",
    "llama-index-llms-openai>=0.5.4",
    # AI/ML Agents
    "pydantic-ai>=0.8.1",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.22.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    # Code quality
    "mypy>=1.6.0",
    "flake8>=6.0.0",
    "black>=24.3.0",
    "ruff>=0.7.1",
    # Pre-commit
    "pre-commit>=4.2.0",
    # Release tooling
    "python-semantic-release>=9.15.0",
    # Jupyter notebook support
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

# [tool.uv.sources]
# Add custom package sources here if needed

[tool.setuptools.packages.find]
where = ["."]
include = [
    "fm_app_toolkit*",
]

[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".ipynb_checkpoints", ".mypy_cache",
    ".pytest_cache", ".ruff_cache", ".venv", ".vscode", "__pypackages__", "build", 
    "dist", "site-packages", "venv",
]
fix = true 
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "E4",    # Enforce rules for imports (e.g., import placement and structure).
    "E7",    # Highlight syntax errors and potential issues in Python 3.x code.
    "E9",    # Catch syntax errors and undefined variables during static analysis.
    "F",     # Flag errors related to code logic, unused variables, or undefined names.
    "I001",  # Ensure that imports are sorted correctly.
    "F401"   # Detect and flag unused imports.
]

fixable = ["ALL"]

[tool.mypy]
python_version = "3.12"
strict = true
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
plugins = ["pydantic.mypy"]
exclude = [
    "fm_app_toolkit/agents/llamaindex/",
]

[[tool.mypy.overrides]]
module = "llama_index.*"
ignore_errors = true

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
norecursedirs = ["examples", "lib", "local", "src", "research", "scripts"]
testpaths = ["tests"]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "functional: marks tests as functional tests (deselect with '-m \"not functional\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')"
]

[tool.coverage.run]
omit = [
    "tests/integration/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:"
]

[tool.semantic_release]
version_source = "commit"
version_toml = ["pyproject.toml:project.version"]
no_git_verify = true
upload_to_release = false
changelog_file = "CHANGELOG.md"
fallback_version_bump = "patch"
allow_zero_version = true
tag_format = "v{version}"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release [no ci]"

[tool.semantic_release.branches.main] 
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"
